// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  AGENT
  USER
}

enum MediaType {
  IMAGE
  VIDEO
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  UNPAID
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum OrderStatus {
  DRAFT
  PENDING
  PAID
  PROCESSING
  COMPLETED
  CANCELED
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  PICKED
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

model TempAccount {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String? // user's name
  passwordHash String // store hashed password, same as User
  token        String   @unique // random string sent in email link
  expiresAt    DateTime // when the token/otp becomes invalid
  attempts     Int      @default(0) // optional: number of verification attempts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String?
  passwordHash String?

  role             Role    @default(USER)
  stripeCustomerId String?

  // password reset
  resetToken        String?
  resetTokenExpires DateTime?

  // relations
  subscriptions  Subscription[]
  payments       Payment[]
  orders         Order[]        @relation("UserOrders")
  assignedOrders Order[]        @relation("AgentAssignedOrders")
  agentProfile   AgentProfile?  @relation("AgentProfileUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id            Int     @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  interval      String
  stripePriceId String?
  active        Boolean @default(true)
  features      Json?

  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  user                 User               @relation(fields: [userId], references: [id])
  userId               Int
  plan                 Plan               @relation(fields: [planId], references: [id])
  planId               Int
  stripeSubscriptionId String?
  status               SubscriptionStatus @default(TRIALING)
  startsAt             DateTime?
  endsAt               DateTime?
  trialEndsAt          DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  Payment              Payment[]
}

model Payment {
  id                    Int           @id @default(autoincrement())
  user                  User          @relation(fields: [userId], references: [id])
  userId                Int
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId        Int?
  stripePaymentIntentId String?
  amountCents           Int
  currency              String
  status                PaymentStatus @default(PENDING)
  paidAt                DateTime?
  metadata              Json?
  createdAt             DateTime      @default(now())
}

model Category {
  id           Int                   @id @default(autoincrement())
  translations CategoryTranslation[]
  products     Product[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  locale      String
  title       String
  description String?

  @@unique([categoryId, locale])
}

model Product {
  id              Int     @id @default(autoincrement())
  sku             String? @unique
  suggestedPrice  Float?
  currency        String?
  popularityScore Int     @default(0)
  shopifyId       String?
  shopifyImported Boolean @default(false)

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  translations ProductTranslation[]
  media        Media[]
  suppliers    ProductSupplier[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  isActive     Boolean              @default(true)
  metadata     Json?
  views        Int                  @default(0)
  likes        Int                  @default(0)
  OrderItem    OrderItem[]
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  locale      String
  title       String
  description String  @db.Text

  @@unique([productId, locale])
}

model Media {
  id        Int       @id @default(autoincrement())
  product   Product?  @relation(fields: [productId], references: [id])
  productId Int?
  url       String
  provider  String?
  type      MediaType
  alt       String?
  sortOrder Int       @default(0)
  metadata  Json?
  createdAt DateTime  @default(now())
}

model Supplier {
  id           Int               @id @default(autoincrement())
  name         String
  marketplace  String?
  baseUrl      String?
  contactInfo  String?
  notes        String?
  productLinks ProductSupplier[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
}

model ProductSupplier {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  supplierId  Int
  url         String
  marketplace String?
  price       Float?
  currency    String?
  isPrimary   Boolean  @default(false)
  notes       String?

  @@index([productId])
  @@index([supplierId])
}

model Order {
  id          Int    @id @default(autoincrement())
  orderNumber String @unique

  // relation to buyer (explicit relation name)
  user   User @relation("UserOrders", fields: [userId], references: [id])
  userId Int

  // relation to agent (explicit relation name)
  agent   User? @relation("AgentAssignedOrders", fields: [agentId], references: [id])
  agentId Int?

  items      OrderItem[]
  totalCents Int
  currency   String
  status     OrderStatus @default(PENDING)
  shipment   Shipment?
  metadata   Json?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        Int
  product        Product @relation(fields: [productId], references: [id])
  productId      Int
  title          String
  unitPriceCents Int
  quantity       Int
  metadata       Json?
}

model Shipment {
  id             Int            @id @default(autoincrement())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        Int            @unique
  method         ShipmentMethod @relation(fields: [methodId], references: [id])
  methodId       Int
  trackingNumber String?
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  costCents      Int?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ShipmentMethod {
  id             Int           @id @default(autoincrement())
  title          String
  country        String?
  minPrice       Float?
  maxPrice       Float?
  costCents      Int
  currency       String
  provider       String?
  active         Boolean       @default(true)
  agent          AgentProfile? @relation(fields: [agentProfileId], references: [id])
  agentProfileId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Shipment       Shipment[]

  @@index([country])
}

model AgentProfile {
  id Int @id @default(autoincrement())

  // explicit relation name between AgentProfile and User
  user   User @relation("AgentProfileUser", fields: [userId], references: [id])
  userId Int  @unique

  companyName     String?
  contactNumber   String?
  details         Json?
  shipmentMethods ShipmentMethod[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}
